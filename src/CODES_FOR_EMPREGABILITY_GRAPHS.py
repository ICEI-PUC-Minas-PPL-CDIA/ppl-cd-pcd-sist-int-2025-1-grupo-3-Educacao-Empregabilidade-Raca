 ## **C√ìDIGO GR√ÅFICOS - State of Data 2023**
```
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Carregar o arquivo Excel (ap√≥s fazer o upload no Colab)
df = pd.read_excel("State_of_data_BR_2023_Kaggle - df_survey_2023.xlsx")

# Selecionar colunas com os nomes exatos
df_emprego = df[[
    "('P1_c ', 'Cor/raca/etnia')", 
    "('P2_a ', 'Qual sua situa√ß√£o atual de trabalho?')", 
    "('P2_h ', 'Faixa salarial')"
]].copy()

# Renomear colunas
df_emprego.columns = ["raca_cor", "empregabilidade", "faixa_salarial"]

# Remover valores ausentes
df_emprego.dropna(subset=["raca_cor", "empregabilidade"], inplace=True)

# Gr√°fico: Empregabilidade por Ra√ßa/Cor
plt.figure(figsize=(12, 6))
sns.countplot(data=df_emprego, x="raca_cor", hue="empregabilidade", palette="Set2")
plt.title("Empregabilidade por Ra√ßa/Cor")
plt.xlabel("Ra√ßa/Cor")
plt.ylabel("Quantidade")
plt.xticks(rotation=45)
plt.legend(title="Empregabilidade", bbox_to_anchor=(1.05, 1), loc='upper left')
plt.tight_layout()
plt.show()

# C√≥digo completo para gerar gr√°ficos de Empregabilidade por Ra√ßa/Cor e Empregabilidade por Faixa Salarial
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Carregar o arquivo Excel (depois de fazer upload no Colab)
df = pd.read_excel("State_of_data_BR_2023_Kaggle - df_survey_2023.xlsx")

# Selecionar colunas com os nomes exatos
df_emprego = df[[
    "('P1_c ', 'Cor/raca/etnia')", 
    "('P2_a ', 'Qual sua situa√ß√£o atual de trabalho?')", 
    "('P2_h ', 'Faixa salarial')"
]].copy()

# Renomear colunas
df_emprego.columns = ["raca_cor", "empregabilidade", "faixa_salarial"]

# Remover valores ausentes
df_emprego.dropna(subset=["raca_cor", "empregabilidade", "faixa_salarial"], inplace=True)

# Gr√°fico 1: Empregabilidade por Ra√ßa/Cor
plt.figure(figsize=(12, 6))
sns.countplot(data=df_emprego, x="raca_cor", hue="empregabilidade", palette="Set2")
plt.title("Empregabilidade por Ra√ßa/Cor")
plt.xlabel("Ra√ßa/Cor")
plt.ylabel("Quantidade")
plt.xticks(rotation=45)
plt.legend(title="Empregabilidade", bbox_to_anchor=(1.05, 1), loc='upper left')
plt.tight_layout()
plt.show()

# Gr√°fico 2: Empregabilidade por Faixa Salarial
plt.figure(figsize=(12, 6))
sns.countplot(data=df_emprego, x="faixa_salarial", hue="empregabilidade", palette="Set3")
plt.title("Empregabilidade por Faixa Salarial")
plt.xlabel("Faixa Salarial")
plt.ylabel("Quantidade")
plt.xticks(rotation=45)
plt.legend(title="Empregabilidade", bbox_to_anchor=(1.05, 1), loc='upper left')
plt.tight_layout()
plt.show()
```
 ## **C√ìDIGO GR√ÅFICOS - Cadastro Geral de Empregados e Desempregados**
``` 
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# üì• Carregar planilha (fa√ßa upload no Colab)
df = pd.read_excel("caged_set.xlsx")

# üó∫Ô∏è Mapear c√≥digos de ra√ßa/cor para nomes
mapa_raca = {
    1: 'Branca',
    2: 'Preta',
    3: 'Parda',
    4: 'Amarela',
    5: 'Ind√≠gena',
    0: 'N√£o informado'
}
df['ra√ßacor'] = df['ra√ßacor'].map(mapa_raca)

# üó∫Ô∏è Mapear grau de instru√ß√£o para nomes leg√≠veis
mapa_instrucao = {
    1: 'Fund. Incompleto',
    2: 'Fund. Completo',
    3: 'M√©dio Incompleto',
    4: 'M√©dio Completo',
    5: 'Superior Incompleto',
    6: 'Superior Completo',
    7: 'P√≥s-gradua√ß√£o',
    9: 'N√£o informado'
}
df['graudeinstru√ß√£o'] = df['graudeinstru√ß√£o'].map(mapa_instrucao)

# üí∞ Criar faixa salarial
def categorizar_salario(salario):
    if salario < 2000:
        return 'At√© R$2000'
    elif salario < 4000:
        return 'R$2000‚Äì3999'
    elif salario < 6000:
        return 'R$4000‚Äì5999'
    else:
        return 'R$6000 ou mais'

df['faixa_salarial'] = df['sal√°rio'].apply(categorizar_salario)

# üîç Limpar valores nulos
df = df.dropna(subset=['ra√ßacor', 'graudeinstru√ß√£o', 'sal√°rio'])

# ========================== GR√ÅFICOS ==========================

# üìä 1 ‚Äì Empregabilidade por Ra√ßa/Cor
plt.figure(figsize=(10,6))
sns.countplot(data=df, x='ra√ßacor', palette='Set2')
plt.title("Empregabilidade por Ra√ßa/Cor")
plt.xlabel("Ra√ßa/Cor")
plt.ylabel("Quantidade de Registros")
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# üìò 2 ‚Äì Empregabilidade por Grau de Instru√ß√£o
plt.figure(figsize=(10,6))
sns.countplot(data=df, x='graudeinstru√ß√£o', palette='Set3')
plt.title("Empregabilidade por Grau de Instru√ß√£o")
plt.xlabel("Grau de Instru√ß√£o")
plt.ylabel("Quantidade de Registros")
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# üí∏ 3 ‚Äì Empregabilidade por Faixa Salarial
plt.figure(figsize=(10,6))
sns.countplot(data=df, x='faixa_salarial', order=['At√© R$2000', 'R$2000‚Äì3999', 'R$4000‚Äì5999', 'R$6000 ou mais'], palette='pastel')
plt.title("Empregabilidade por Faixa Salarial")
plt.xlabel("Faixa Salarial")
plt.ylabel("Quantidade de Registros")
plt.tight_layout()
plt.show()

# üîÑ 4 ‚Äì Grau de Instru√ß√£o por Ra√ßa/Cor
plt.figure(figsize=(12,6))
sns.countplot(data=df, x='graudeinstru√ß√£o', hue='ra√ßacor', palette='husl')
plt.title("Distribui√ß√£o de Grau de Instru√ß√£o por Ra√ßa/Cor")
plt.xlabel("Grau de Instru√ß√£o")
plt.ylabel("Quantidade")
plt.xticks(rotation=45)
plt.legend(title="Ra√ßa/Cor", bbox_to_anchor=(1.05, 1), loc='upper left')
plt.tight_layout()
plt.show()

# üíº 5 ‚Äì Faixa Salarial por Grau de Instru√ß√£o
plt.figure(figsize=(12,6))
sns.countplot(data=df, x='graudeinstru√ß√£o', hue='faixa_salarial', palette='coolwarm')
plt.title("Faixa Salarial por Grau de Instru√ß√£o")
plt.xlabel("Grau de Instru√ß√£o")
plt.ylabel("Quantidade")
plt.xticks(rotation=45)
plt.legend(title="Faixa Salarial", bbox_to_anchor=(1.05, 1), loc='upper left')
plt.tight_layout()
plt.show()

# üì¶ 6 ‚Äì Boxplot de Sal√°rio por Ra√ßa/Cor
plt.figure(figsize=(10,6))
sns.boxplot(data=df, x='ra√ßacor', y='sal√°rio', palette='Set2')
plt.title("Distribui√ß√£o dos Sal√°rios por Ra√ßa/Cor")
plt.xlabel("Ra√ßa/Cor")
plt.ylabel("Sal√°rio (R$)")
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()
```
## Gerar e salvar os gr√°ficos como imagens:
```
import os
from matplotlib import pyplot as plt

# Criar pasta para imagens
os.makedirs("graficos", exist_ok=True)

# Fun√ß√£o para salvar gr√°ficos com t√≠tulo
def salvar_grafico(fig, nome):
    caminho = f"graficos/{nome}.png"
    fig.savefig(caminho, bbox_inches='tight')
    plt.close(fig)

# 1 ‚Äì Empregabilidade por Ra√ßa/Cor
fig1 = plt.figure(figsize=(10,6))
sns.countplot(data=df, x='ra√ßacor', palette='Set2')
plt.title("Empregabilidade por Ra√ßa/Cor")
plt.xlabel("Ra√ßa/Cor")
plt.ylabel("Quantidade")
plt.xticks(rotation=45)
salvar_grafico(fig1, "empregabilidade_raca")

# 2 ‚Äì Empregabilidade por Grau de Instru√ß√£o
fig2 = plt.figure(figsize=(10,6))
sns.countplot(data=df, x='graudeinstru√ß√£o', palette='Set3')
plt.title("Empregabilidade por Grau de Instru√ß√£o")
plt.xlabel("Grau de Instru√ß√£o")
plt.ylabel("Quantidade")
plt.xticks(rotation=45)
salvar_grafico(fig2, "empregabilidade_instrucao")

# 3 ‚Äì Faixa Salarial
fig3 = plt.figure(figsize=(10,6))
sns.countplot(data=df, x='faixa_salarial', order=['At√© R$2000', 'R$2000‚Äì3999', 'R$4000‚Äì5999', 'R$6000 ou mais'], palette='pastel')
plt.title("Faixa Salarial dos Empregados")
plt.xlabel("Faixa Salarial")
plt.ylabel("Quantidade")
salvar_grafico(fig3, "faixa_salarial")

# 4 ‚Äì Instru√ß√£o por Ra√ßa/Cor
fig4 = plt.figure(figsize=(12,6))
sns.countplot(data=df, x='graudeinstru√ß√£o', hue='ra√ßacor', palette='husl')
plt.title("Distribui√ß√£o de Grau de Instru√ß√£o por Ra√ßa/Cor")
plt.xlabel("Grau de Instru√ß√£o")
plt.ylabel("Quantidade")
plt.xticks(rotation=45)
salvar_grafico(fig4, "instrucao_por_raca")

# 5 ‚Äì Faixa Salarial por Instru√ß√£o
fig5 = plt.figure(figsize=(12,6))
sns.countplot(data=df, x='graudeinstru√ß√£o', hue='faixa_salarial', palette='coolwarm')
plt.title("Faixa Salarial por Grau de Instru√ß√£o")
plt.xlabel("Grau de Instru√ß√£o")
plt.ylabel("Quantidade")
plt.xticks(rotation=45)
salvar_grafico(fig5, "salario_por_instrucao")

# 6 ‚Äì Boxplot de Sal√°rio por Ra√ßa
fig6 = plt.figure(figsize=(10,6))
sns.boxplot(data=df, x='ra√ßacor', y='sal√°rio', palette='Set2')
plt.title("Distribui√ß√£o dos Sal√°rios por Ra√ßa/Cor")
plt.xlabel("Ra√ßa/Cor")
plt.ylabel("Sal√°rio (R$)")
plt.xticks(rotation=45)
salvar_grafico(fig6, "boxplot_salario_raca")
```

